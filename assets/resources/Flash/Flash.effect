// Copyright (c) 2017-2018 Xiamen Yaji Software Co., Ltd.  

CCEffect %{
  techniques:
  - passes:
    - vert: vs
      frag: fs
      blendState:
        targets:
        - blend: true
      rasterizerState:
        cullMode: none
      properties:
        texture: { value: white }
        alphaThreshold: { value: 0.5 }
        Time: { value: 0.0 }
        Angle: { value: 45.0 }
        Interval: { value: 2.0 }
        Speed: { value: 2.0 }
        Wight: { value: 0.2 }
}%


CCProgram vs %{
  precision highp float;

  #include <cc-global>
  #include <cc-local>

  in vec3 a_position;
  in vec4 a_color;
  out vec4 v_color;

  #if USE_TEXTURE
  in vec2 a_uv0;
  out vec2 v_uv0;
  #endif

  void main () {
    vec4 pos = vec4(a_position, 1);

    #if CC_USE_MODEL
    pos = cc_matViewProj * cc_matWorld * pos;
    #else
    pos = cc_matViewProj * pos;
    #endif

    #if USE_TEXTURE
    v_uv0 = a_uv0;
    #endif

    v_color = a_color;

    gl_Position = pos;
  }
}%


CCProgram fs %{
  precision highp float;
  
  #include <alpha-test>
  #include <texture>

  in vec4 v_color;

  #if USE_TEXTURE
  in vec2 v_uv0;
  uniform sampler2D texture;
  uniform anonymity {
    float Time;
    float Angle;
    float Interval;
    float Speed;
    float Wight;
  };
  #endif

  float flash(vec2 uv) {
    float radian = 0.0174444 * Angle;
    float x0 = fract(Time / Interval) * Interval * Speed;
    float projection_x = uv.y / tan(radian);
    float xn = x0 - projection_x;
    float mid_luminous = xn;
    float rate = 1.0 - abs(uv.x - mid_luminous) / Wight;
    float brightness = max(rate, 0.0);
    return brightness;
  }

  void main () {
    vec4 o = vec4(1, 1, 1, 1);

    #if USE_TEXTURE
      CCTexture(texture, v_uv0, o);
    #endif

    o *= v_color;

    if (o.a > 0.5) {
      float brightness = flash(v_uv0);
      o = o + vec4(1.0, 1.0, 1.0, 1.0) * brightness;
    } else {
      o = vec4(0.0);
    }

    ALPHA_TEST(o);

    gl_FragColor = o;
  }
}%
