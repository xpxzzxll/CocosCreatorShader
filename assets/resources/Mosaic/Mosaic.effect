// Copyright (c) 2017-2018 Xiamen Yaji Software Co., Ltd.  

CCEffect %{
  techniques:
  - passes:
    - vert: vs
      frag: fs
      blendState:
        targets:
        - blend: true
      rasterizerState:
        cullMode: none
      properties:
        texture: { value: white }
        alphaThreshold: { value: 0.5 }
}%


CCProgram vs %{
  precision highp float;

  #include <cc-global>
  #include <cc-local>

  in vec3 a_position;
  in vec4 a_color;
  out vec4 v_color;

  #if USE_TEXTURE
  in vec2 a_uv0;
  out vec2 v_uv0;
  #endif

  void main () {
    vec4 pos = vec4(a_position, 1);

    #if CC_USE_MODEL
    pos = cc_matViewProj * cc_matWorld * pos;
    #else
    pos = cc_matViewProj * pos;
    #endif

    #if USE_TEXTURE
    v_uv0 = a_uv0;
    #endif

    v_color = a_color;

    gl_Position = pos;
  }
}%


CCProgram fs %{
  precision highp float;
  
  #include <alpha-test>
  #include <texture>

  in vec4 v_color;

  #if USE_TEXTURE
  in vec2 v_uv0;
  uniform sampler2D texture;
  #endif

  void main () {
    vec4 o = vec4(1, 1, 1, 1);

    #if USE_TEXTURE
      float imageWidth = 512.0;
      float imageHeight = 512.0;
      float mosaicSize = 12.0;
      vec2 texSize = vec2(imageWidth, imageHeight);
      // 计算实际图像位置
      vec2 xy = vec2(v_uv0.x * texSize.x, v_uv0.y * texSize.y);
      // 计算某一个小mosaic的中心坐标
      vec2 mosaicCenter = vec2(
        floor(xy.x / mosaicSize) * mosaicSize + 0.5 * mosaicSize,
        floor(xy.y / mosaicSize) * mosaicSize + 0.5 * mosaicSize);
      // 计算距离中心的长度
      vec2 delXY = mosaicCenter - xy;
      float delLength = length(delXY);
      // 换算回纹理坐标系
      vec2 uvMosaic = vec2(mosaicCenter.x / texSize.x, mosaicCenter.y / texSize.y);

      if (delLength < 0.5 * mosaicSize) {
          CCTexture(texture, uvMosaic, o);
      } else {
          CCTexture(texture, v_uv0, o);
      }
    #endif

    o *= v_color;

    ALPHA_TEST(o);

    gl_FragColor = o;
  }
}%
