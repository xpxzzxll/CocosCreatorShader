// Copyright (c) 2017-2018 Xiamen Yaji Software Co., Ltd.  

CCEffect %{
  techniques:
  - passes:
    - vert: vs
      frag: fs
      blendState:
        targets:
        - blend: true
      rasterizerState:
        cullMode: none
      properties:
        texture: { value: white }
        alphaThreshold: { value: 0.5 }
        uv_offset: {value: [0.0, 0.0]}
        uv_calc_x: {value: [0.0, 1.0]}
        uv_calc_y: {value: [0.0, 1.0]}
}%


CCProgram vs %{
  precision highp float;

  #include <cc-global>
  #include <cc-local>

  in vec3 a_position;
  in vec4 a_color;
  out vec4 v_color;

  #if USE_TEXTURE
  in vec2 a_uv0;
  out vec2 v_uv0;

  #endif

  void main () {
    vec4 pos = vec4(a_position, 1);

    #if CC_USE_MODEL
    pos = cc_matViewProj * cc_matWorld * pos;
    #else
    pos = cc_matViewProj * pos;
    #endif

    #if USE_TEXTURE
    v_uv0 = a_uv0;
    #endif

    v_color = a_color;

    gl_Position = pos;
  }
}%


CCProgram fs %{
  precision highp float;
  
  #include <alpha-test>
  #include <texture>

  in vec4 v_color;

  #if USE_TEXTURE
  in vec2 v_uv0;
  uniform sampler2D texture;
  uniform anonymity {
    vec2 uv_offset;
    vec2 uv_calc_x;
    vec2 uv_calc_y;
  };
  #endif


  

  void main () {
    vec4 o = vec4(1, 1, 1, 1);

    #if USE_TEXTURE
      vec2 uv = v_uv0 + uv_offset;
      float x = uv.x;
      float y = uv.y;
      if (x >= (uv_calc_x.x + uv_calc_x.y)) {
        x = x - uv_calc_x.y;
      }
      if (y >= (uv_calc_y.x + uv_calc_y.y)) {
        y = y - uv_calc_y.y;
      }
      uv = vec2(x, y);
      CCTexture(texture, uv, o);
    #endif

    o *= v_color;

    ALPHA_TEST(o);

    gl_FragColor = o;
  }
}%
