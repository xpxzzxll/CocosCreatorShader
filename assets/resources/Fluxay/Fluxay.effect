// Copyright (c) 2017-2018 Xiamen Yaji Software Co., Ltd.  

CCEffect %{
  techniques:
  - passes:
    - vert: vs
      frag: fs
      blendState:
        targets:
        - blend: true
      rasterizerState:
        cullMode: none
      properties:
        texture: { value: white }
        alphaThreshold: { value: 0.5 }
        time: { value: 0.0 }
}%


CCProgram vs %{
  precision highp float;

  #include <cc-global>
  #include <cc-local>

  in vec3 a_position;
  in vec4 a_color;
  out vec4 v_color;

  #if USE_TEXTURE
  in vec2 a_uv0;
  out vec2 v_uv0;
  #endif

  void main () {
    vec4 pos = vec4(a_position, 1);

    #if CC_USE_MODEL
    pos = cc_matViewProj * cc_matWorld * pos;
    #else
    pos = cc_matViewProj * pos;
    #endif

    #if USE_TEXTURE
    v_uv0 = a_uv0;
    #endif

    v_color = a_color;

    gl_Position = pos;
  }
}%


CCProgram fs %{
  precision highp float;
  
  #include <alpha-test>
  #include <texture>

  #define TAU 6.12
  #define MAX_ITER 5

  in vec4 v_color;

  #if USE_TEXTURE
  in vec2 v_uv0;
  uniform sampler2D texture;
  uniform anonymity {
    float time;
  };
  #endif

  void main () {
    vec4 o = vec4(1, 1, 1, 1);

    #if USE_TEXTURE
      float time = time * 0.5 + 5.0;
      vec2 p = mod(v_uv0 * TAU, TAU) - 250.0;
      vec2 i = vec2(p);
      float c = 1.0;
      float inten = 0.0045;
      for (int n = 0; n < MAX_ITER; n++) {
          float t = time * (1.0 - (3.5 / float(n + 1)));
          i = p + vec2(cos(t - i.x) + sin(t + i.y), sin(t - i.y) + cos(1.5 * t + i.x));
          c += 1.0 / length(vec2(p.x / (cos(i.x + t) / inten), p.y / (cos(i.y + t) / inten)));
      }
      c /= float(MAX_ITER);
      c = 1.17 - pow(c, 1.4);
      vec3 _o = vec3(pow(abs(c), 20.0));
      CCTexture(texture, v_uv0, o);
      _o = clamp(_o + vec3(0.0, 0.0, 0.0), 0.0, o.a);
      float alpha = c * o.a;
      o.r = o.r + _o.r * alpha;
      o.g = o.g + _o.g * alpha;
      o.b = o.b + _o.b * alpha;
    #endif

    o *= v_color;

    ALPHA_TEST(o);

    gl_FragColor = o;
  }
}%
