// Copyright (c) 2017-2018 Xiamen Yaji Software Co., Ltd.  

CCEffect %{
  techniques:
  - passes:
    - vert: vs
      frag: fs
      blendState:
        targets:
        - blend: true
      rasterizerState:
        cullMode: none
      properties:
        texture: { value: white }
        alphaThreshold: { value: 0.5 }
}%


CCProgram vs %{
  precision highp float;

  #include <cc-global>
  #include <cc-local>

  in vec3 a_position;
  in vec4 a_color;
  out vec4 v_color;

  #if USE_TEXTURE
  in vec2 a_uv0;
  out vec2 v_uv0;
  #endif

  void main () {
    vec4 pos = vec4(a_position, 1);

    #if CC_USE_MODEL
    pos = cc_matViewProj * cc_matWorld * pos;
    #else
    pos = cc_matViewProj * pos;
    #endif

    #if USE_TEXTURE
    v_uv0 = a_uv0;
    #endif

    v_color = a_color;

    gl_Position = pos;
  }
}%


CCProgram fs %{
  precision highp float;
  
  #include <alpha-test>
  #include <texture>

  in vec4 v_color;

  #if USE_TEXTURE
  in vec2 v_uv0;
  uniform sampler2D texture;
  #endif

  void main () {
    vec4 o = vec4(1, 1, 1, 1);

    #if USE_TEXTURE
      float _SampleRange = 7.0;
      vec2 _SampleInterval = vec2(1.0, 1.0);
      vec2 _TexSize = vec2(256.0, 256.0);
      float _Factor = 1.0;
      vec4 _Color = vec4(0.0, 1.0, 0.0, 1.0);
      int range = int(_SampleRange);
      float radiusX = _SampleInterval.x / _TexSize.x;
      float radiusY = _SampleInterval.y / _TexSize.y;
      float inner = 0.0;
      float outter = 0.0;
      int count = 0;
      for (int k = -7; k <= 7; ++k) {
          for (int j = -7; j <= 7; ++j) {
              vec4 m = texture2D(texture, vec2(v_uv0.x + float(k) * radiusX, v_uv0.y + float(j) * radiusY));
              outter += 1.0 - m.a;
              inner += m.a;
              count += 1;
          }
      }
      inner /= float(count);
      outter /= float(count);
      CCTexture(texture, v_uv0, o);
      o *= v_color;
      float out_alpha = max(o.a, inner);
      // float in_alpha = min(out_alpha, outter);
      // o.rgb = o.rgb + in_alpha * _Factor * _Color.a * _Color.rgb;
      o.rgb = o.rgb + (1.0 - o.a) * _Factor * _Color.a * _Color.rgb;
      o.a = out_alpha;
    #endif

    ALPHA_TEST(o);

    gl_FragColor = o;
  }
}%
