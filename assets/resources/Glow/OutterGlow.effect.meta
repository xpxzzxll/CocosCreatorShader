{
  "ver": "1.0.25",
  "uuid": "307adbcb-d674-4054-94a2-3bdaeb908d5c",
  "compiledShaders": [
    {
      "glsl1": {
        "vert": "\nprecision highp float;\nuniform mat4 cc_matViewProj;\nuniform mat4 cc_matWorld;\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\n#if USE_TEXTURE\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}",
        "frag": "\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform float alphaThreshold;\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\nvarying vec4 v_color;\n#if USE_TEXTURE\nvarying vec2 v_uv0;\nuniform sampler2D texture;\n#endif\nvoid main () {\n  vec4 o = vec4(1, 1, 1, 1);\n  #if USE_TEXTURE\n    float _SampleRange = 7.0;\n    vec2 _SampleInterval = vec2(1.0, 1.0);\n    vec2 _TexSize = vec2(256.0, 256.0);\n    float _Factor = 1.0;\n    vec4 _Color = vec4(0.0, 1.0, 0.0, 1.0);\n    int range = int(_SampleRange);\n    float radiusX = _SampleInterval.x / _TexSize.x;\n    float radiusY = _SampleInterval.y / _TexSize.y;\n    float inner = 0.0;\n    float outter = 0.0;\n    int count = 0;\n    for (int k = -7; k <= 7; ++k) {\n        for (int j = -7; j <= 7; ++j) {\n            vec4 m = texture2D(texture, vec2(v_uv0.x + float(k) * radiusX, v_uv0.y + float(j) * radiusY));\n            outter += 1.0 - m.a;\n            inner += m.a;\n            count += 1;\n        }\n    }\n    inner /= float(count);\n    outter /= float(count);\n  vec4 texture_tmp = texture2D(texture, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_texture\n      texture_tmp.a *= texture2D(texture, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    o.rgb *= (texture_tmp.rgb * texture_tmp.rgb);\n    o.a *= texture_tmp.a;\n  #else\n    o *= texture_tmp;\n  #endif\n    o *= v_color;\n    float out_alpha = max(o.a, inner);\n    o.rgb = o.rgb + (1.0 - o.a) * _Factor * _Color.a * _Color.rgb;\n    o.a = out_alpha;\n  #endif\n  ALPHA_TEST(o);\n  gl_FragColor = o;\n}"
      },
      "glsl3": {
        "vert": "\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\n#if USE_TEXTURE\nin vec2 a_uv0;\nout vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}",
        "frag": "\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform ALPHA_TEST {\n    float alphaThreshold;\n  };\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\nin vec4 v_color;\n#if USE_TEXTURE\nin vec2 v_uv0;\nuniform sampler2D texture;\n#endif\nvoid main () {\n  vec4 o = vec4(1, 1, 1, 1);\n  #if USE_TEXTURE\n    float _SampleRange = 7.0;\n    vec2 _SampleInterval = vec2(1.0, 1.0);\n    vec2 _TexSize = vec2(256.0, 256.0);\n    float _Factor = 1.0;\n    vec4 _Color = vec4(0.0, 1.0, 0.0, 1.0);\n    int range = int(_SampleRange);\n    float radiusX = _SampleInterval.x / _TexSize.x;\n    float radiusY = _SampleInterval.y / _TexSize.y;\n    float inner = 0.0;\n    float outter = 0.0;\n    int count = 0;\n    for (int k = -7; k <= 7; ++k) {\n        for (int j = -7; j <= 7; ++j) {\n            vec4 m = texture2D(texture, vec2(v_uv0.x + float(k) * radiusX, v_uv0.y + float(j) * radiusY));\n            outter += 1.0 - m.a;\n            inner += m.a;\n            count += 1;\n        }\n    }\n    inner /= float(count);\n    outter /= float(count);\n  vec4 texture_tmp = texture(texture, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_texture\n      texture_tmp.a *= texture(texture, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    o.rgb *= (texture_tmp.rgb * texture_tmp.rgb);\n    o.a *= texture_tmp.a;\n  #else\n    o *= texture_tmp;\n  #endif\n    o *= v_color;\n    float out_alpha = max(o.a, inner);\n    o.rgb = o.rgb + (1.0 - o.a) * _Factor * _Color.a * _Color.rgb;\n    o.a = out_alpha;\n  #endif\n  ALPHA_TEST(o);\n  gl_FragColor = o;\n}"
      }
    }
  ],
  "subMetas": {}
}