{
  "ver": "1.0.25",
  "uuid": "2f6eabfd-3c69-4125-8cda-7abd258a10e0",
  "compiledShaders": [
    {
      "glsl1": {
        "vert": "\nprecision highp float;\nuniform mat4 cc_matViewProj;\nuniform mat4 cc_matWorld;\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\n#if USE_TEXTURE\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}",
        "frag": "\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform float alphaThreshold;\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\nvarying vec4 v_color;\n#if USE_TEXTURE\nvarying vec2 v_uv0;\nuniform sampler2D texture;\nuniform float radius;\nuniform float w_divide_h;\n#endif\nvoid main () {\n  vec4 o = vec4(1, 1, 1, 1);\n  #if USE_TEXTURE\n  vec4 texture_tmp = texture2D(texture, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_texture\n      texture_tmp.a *= texture2D(texture, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    o.rgb *= (texture_tmp.rgb * texture_tmp.rgb);\n    o.a *= texture_tmp.a;\n  #else\n    o *= texture_tmp;\n  #endif\n  #endif\n  o *= v_color;\n  ALPHA_TEST(o);\n  vec2 uv = v_uv0 - vec2(0.5, 0.5);\n  float u, v;\n  if (w_divide_h >= 1.0) {\n      uv *= vec2(w_divide_h, 1.0);\n      u = 0.5 * w_divide_h - radius;\n      v = 0.5 - radius;\n  }else {\n      uv *= vec2(1.0, 1.0 / w_divide_h);\n      u = 0.5 - radius;\n      v = 0.5 / w_divide_h - radius;\n  }\n  float ax = step(u, abs(uv.x));\n  float ay = step(v, abs(uv.y));\n  float al = 0.0;\n  if (abs(uv.x) >= u && abs(uv.y) >= v) {\n      float rx = abs(uv.x) - u;\n      float ry = abs(uv.y) - v;\n      float len = length(vec2(rx, ry));\n      al = step(radius, len);\n      float delta = len - radius;\n      if (len > radius && delta < 0.005) {\n          al = smoothstep(0.0, 0.01, delta);\n      }\n  }\n  float alpha = 1.0 - ax * ay * al;\n  gl_FragColor = vec4(o.r, o.g, o.b, o.a * alpha);;\n}"
      },
      "glsl3": {
        "vert": "\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\n#if USE_TEXTURE\nin vec2 a_uv0;\nout vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}",
        "frag": "\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform ALPHA_TEST {\n    float alphaThreshold;\n  };\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\nin vec4 v_color;\n#if USE_TEXTURE\nin vec2 v_uv0;\nuniform sampler2D texture;\nuniform anonymity {\n  float  radius;\n  float  w_divide_h;\n};\n#endif\nvoid main () {\n  vec4 o = vec4(1, 1, 1, 1);\n  #if USE_TEXTURE\n  vec4 texture_tmp = texture(texture, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_texture\n      texture_tmp.a *= texture(texture, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    o.rgb *= (texture_tmp.rgb * texture_tmp.rgb);\n    o.a *= texture_tmp.a;\n  #else\n    o *= texture_tmp;\n  #endif\n  #endif\n  o *= v_color;\n  ALPHA_TEST(o);\n  vec2 uv = v_uv0 - vec2(0.5, 0.5);\n  float u, v;\n  if (w_divide_h >= 1.0) {\n      uv *= vec2(w_divide_h, 1.0);\n      u = 0.5 * w_divide_h - radius;\n      v = 0.5 - radius;\n  }else {\n      uv *= vec2(1.0, 1.0 / w_divide_h);\n      u = 0.5 - radius;\n      v = 0.5 / w_divide_h - radius;\n  }\n  float ax = step(u, abs(uv.x));\n  float ay = step(v, abs(uv.y));\n  float al = 0.0;\n  if (abs(uv.x) >= u && abs(uv.y) >= v) {\n      float rx = abs(uv.x) - u;\n      float ry = abs(uv.y) - v;\n      float len = length(vec2(rx, ry));\n      al = step(radius, len);\n      float delta = len - radius;\n      if (len > radius && delta < 0.005) {\n          al = smoothstep(0.0, 0.01, delta);\n      }\n  }\n  float alpha = 1.0 - ax * ay * al;\n  gl_FragColor = vec4(o.r, o.g, o.b, o.a * alpha);;\n}"
      }
    }
  ],
  "subMetas": {}
}