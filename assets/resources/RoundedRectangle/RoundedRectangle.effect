// Copyright (c) 2017-2018 Xiamen Yaji Software Co., Ltd.  

CCEffect %{
  techniques:
  - passes:
    - vert: vs
      frag: fs
      blendState:
        targets:
        - blend: true
      rasterizerState:
        cullMode: none
      properties:
        texture: { value: white }
        alphaThreshold: { value: 0.5 }
        radius: { value: 0.1 }
        w_divide_h: { value: 1.0 }
}%


CCProgram vs %{
  precision highp float;

  #include <cc-global>
  #include <cc-local>

  in vec3 a_position;
  in vec4 a_color;
  out vec4 v_color;

  #if USE_TEXTURE
  in vec2 a_uv0;
  out vec2 v_uv0;
  #endif

  void main () {
    vec4 pos = vec4(a_position, 1);

    #if CC_USE_MODEL
    pos = cc_matViewProj * cc_matWorld * pos;
    #else
    pos = cc_matViewProj * pos;
    #endif

    #if USE_TEXTURE
    v_uv0 = a_uv0;
    #endif

    v_color = a_color;

    gl_Position = pos;
  }
}%


CCProgram fs %{
  precision highp float;
  
  #include <alpha-test>
  #include <texture>

  in vec4 v_color;

  #if USE_TEXTURE
  in vec2 v_uv0;
  uniform sampler2D texture;
  uniform anonymity {
    float  radius;
    float  w_divide_h;
  };
  #endif

  void main () {
    vec4 o = vec4(1, 1, 1, 1);

    #if USE_TEXTURE
      CCTexture(texture, v_uv0, o);
    #endif

    o *= v_color;

    ALPHA_TEST(o);

    vec2 uv = v_uv0 - vec2(0.5, 0.5);
    float u, v;
    if (w_divide_h >= 1.0) {
        uv *= vec2(w_divide_h, 1.0);
        u = 0.5 * w_divide_h - radius;
        v = 0.5 - radius;
    }else {
        uv *= vec2(1.0, 1.0 / w_divide_h);
        u = 0.5 - radius;
        v = 0.5 / w_divide_h - radius;
    }
    float ax = step(u, abs(uv.x));
    float ay = step(v, abs(uv.y));
    float al = 0.0;
    if (abs(uv.x) >= u && abs(uv.y) >= v) {
        float rx = abs(uv.x) - u;
        float ry = abs(uv.y) - v;
        float len = length(vec2(rx, ry));
        al = step(radius, len);
        float delta = len - radius;
        if (len > radius && delta < 0.005) {
            al = smoothstep(0.0, 0.01, delta);
        }
    }
    float alpha = 1.0 - ax * ay * al;

    gl_FragColor = vec4(o.r, o.g, o.b, o.a * alpha);;
  }
}%
